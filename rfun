#!/usr/bin/env Rscript
## A class that contains bam file information
## Copyright 2014, Sahil Seth
## licence: MIT
## sahil.seth@me.com
## A few functions to supplement those already in this package.
## URL: github.com/sahilseth/rfun
## URL: docs.flowr.space
#### -----------------------

## -------- incase of issues switch on verbose to see what is going on !
verbose=FALSE
nm = "rfun"

get_params <- function(paramPairs){
  func <- as.character(paramPairs[1])
  if(length(func) == 0) return(help())
  args <- formals(func)
  paramPairs <- paramPairs[grep("=", paramPairs)] ## get those with =
  if(verbose) message("We have ",length(paramPairs)," parameters\n")
  for(param in paramPairs){
    temp <- unlist(strsplit(param, "="));
    nm = temp[1]
    value=temp[2]
    value <- strsplit(value,",")[[1]] #handling those with , in value.. for multiple R values
    ## ---------- if function supports ... need to pass ALL arguments
    if(sum(names(args) %in% "...") & !nm %in% names(args)){
      message("Adding ", nm, ":", value)
	  l = list(nm = value);names(l) = nm
      args <- c(args, l)
    }
    if(class(args[[nm]]) == "numeric" ){
      args[[nm]] = as.numeric(value)
    }else if(class(args[[nm]]) %in% c("character", "name" )){
      args[[nm]] = as.character(value)
    }else if(class(args[[nm]]) %in% c("logical")){
      args[[nm]] = as.logical(value)
    }else if(class(args[[nm]]) %in% c("list")){
      args[[nm]] = as.list(value)
    }
  }
  if(verbose) print(args)#print(do.call(rbind, as.list(args)))
  return(as.list(args))
}


flow_help <- function(){
    cmds <- matrix(c(
        'status',   'Detailed status of a flow',
        'kill_flow',     'Kill the flow, upon providing working directory'
    ), byrow=T, ncol=2)
    cat("\nThis interface allows shell access to all functions in package flowr (and beyond).")
    cat(sprintf("\n  %-15s %s\n", cmds[,1], cmds[,2]), sep="")
}

generic_help <- function(){
    cat(sprintf("\nUsage: %s function [arguments]\n", nm))
    cat("\nFunctions where the arguments are simple objects like numeric/character/logical can be called.",
        "\nLists become a little more complicated. say x=a,b is converted to a list with elements a,b\n",
        "\nSome examples:")
    if(nm == "flowr"){
        flow_help()
    }else{
        cat("\n##sample some numbers:\nrnorm x=100",
            "\n##fetch files from pacakges:",
            "\nrmd=$(rfun system.file package=knitr ...=examples/knitr-minimal.Rmd)",
            "\necho $rmd",
            "\n## knit this awesome example !",
            "\nrfun knitr::knit input=$rmd\n")
    }
    cat(sprintf("\nPlease use '%s function -h' to obtain further information about the usage.\n", nm))
}



args <- commandArgs(trailingOnly = TRUE)

##-------- if default function is not in the space, load flowr library
if(nm == "flowr")
    require(flowr, quietly=!verbose, warn.conflicts=verbose)

## -------------- Load the required package
if(grepl("::", args[1])){
  pkg <- gsub("(.?)::.*", "\\1", args[1])
  cat("loading pkg:", pkg, "\n");
  library(pkg, character.only = TRUE)
  args[1] = gsub(".*::(.*)", "\\1", args[1])
}

if(is.na(args[1])) {
    generic_help()
}else if(args[1] == "-h"){
  flow_help()
}else if(is.na(args[2])){
  help(args[1])
}else if(args[2] == "-h"){
  help(args[1])
}else{
  params <- get_params(args)
  if(verbose){
    cat("\nStarting",args[1],"with params\n",
        paste(names(params), unlist(params),sep=": ",
              collapse="\n"),"\n")
    #print(args)
    if(verbose) print(str(params))
  }
  cat(out <- do.call(as.character(args[1]), args = params))
}



